import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { User, Shield, ArrowRight } from 'lucide-react';
import { SellerService } from '@/components/services/sellerService';
import { motion } from 'framer-motion';
import { LoadingSpinner } from '@/components/common/LoadingSpinner';
import { useToast } from '@/components/common/Toast';
import { useFormValidation, ValidatedInput, validationRules } from '@/components/common/FormValidation';

export default function Register() {
  const navigate = useNavigate();
  const { success, error } = useToast();
  const [showOTP, setShowOTP] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [sellerId, setSellerId] = useState(null); // optional

  // Backend requires (000)-000-0000
  const registrationSchema = {
    full_name: [validationRules.required, validationRules.minLength(2)],
    phone: [validationRules.required, (v) => /^\(\d{3}\)-\d{3}-\d{4}$/.test(v) || 'Use (000)-000-0000 format'],
  };
  const registrationForm = useFormValidation({ full_name: '', phone: '' }, registrationSchema);

  const otpSchema = {
    otp: [validationRules.required, (v) => /^\d{6}$/.test(v) || '6-digit code required'],
  };
  const otpForm = useFormValidation({ otp: '' }, otpSchema);

  // Format to (000)-000-0000 while typing
  const formatPhoneNumber = (value) => {
    const digits = String(value || '').replace(/\D/g, '').slice(0, 10);
    const a = digits.slice(0, 3);
    const b = digits.slice(3, 6);
    const c = digits.slice(6, 10);
    if (digits.length <= 3) return `(${a}`;
    if (digits.length <= 6) return `(${a})-${b}`;
    return `(${a})-${b}-${c}`;
  };
  const handlePhoneChange = (name, value) => {
    const formatted = formatPhoneNumber(value);
    registrationForm.handleChange(name, formatted);
  };

  const handleSendSMS = async () => {
    if (!registrationForm.validateForm()) {
      error('Please fill in all fields correctly');
      return;
    }
    setIsLoading(true);
    try {
      // Optional: register seller in your system
      try {
        const seller = await SellerService.register({
          full_name: registrationForm.values.full_name,
          phone: registrationForm.values.phone,
        });
        setSellerId(seller?.id || null);
      } catch (_) {
        // ignore if not required
      }

      // Send verification code (must be { name, phone })
      await SellerService.sendVerificationCode(
        registrationForm.values.full_name,
        registrationForm.values.phone
      );
      setShowOTP(true);
      success('Verification code sent to your phone!');
    } catch (err) {
      error(err?.message || 'Failed to send verification code. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };
  const handleVerifyOTP = async () => {
    if (!otpForm.validateForm()) {
      error('Please enter a valid 6-digit code');
      return;
    }
    setIsLoading(true);
    try {
      await SellerService.verifyPhone(
        registrationForm.values.phone,
        otpForm.values.otp
      );
      if (sellerId) {
        localStorage.setItem('moolahturtle_sellerId', sellerId);
      }
      success('Phone verified successfully!');
      navigate(createPageUrl(`PropertyDetails${sellerId ? \`?seller_id=\${sellerId}\` : ''}`));
    } catch (err) {
      error(err?.message || 'Invalid verification code. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-[calc(10vh-8rem)] flex items-center justify-center py-12 px-4">
      <Card className="w-full max-w-md mx-auto shadow-2xl border-0">
        <CardHeader>
          <div className="flex items-center gap-4">
            <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center">
              {showOTP ? <Shield className="w-8 h-8 text-white" /> : <User className="w-8 h-8 text-white" />}
            </div>
            <div>
              <CardTitle className="text-2xl font-bold">
                {showOTP ? 'Verify Your Phone' : 'Get Started'}
              </CardTitle>
              <p className="text-gray-600 mt-1">
                {showOTP ? 'Enter the code we sent you' : 'Tell us about yourself'}
              </p>
            </div>
          </div>
        </CardHeader>

        <CardContent>
          {!showOTP ? (
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="space-y-6">
              <ValidatedInput
                name="full_name"
                label="Full Name"
                placeholder="Enter your full name"
                value={registrationForm.values.full_name}
                error={registrationForm.errors.full_name}
                touched={registrationForm.touched.full_name}
                onChange={registrationForm.handleChange}
                onBlur={registrationForm.handleBlur}
                required
              />
              <ValidatedInput
                name="phone"
                label="Phone Number"
                placeholder="(000)-000-0000"
                value={registrationForm.values.phone}
                error={registrationForm.errors.phone}
                touched={registrationForm.touched.phone}
                onChange={handlePhoneChange}
                onBlur={registrationForm.handleBlur}
                maxLength={14}
                required
              />
              <Button
                onClick={handleSendSMS}
                disabled={isLoading || !registrationForm.isValid}
                className="w-full py-6 text-lg bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 disabled:opacity-50"
              >
                {isLoading ? <LoadingSpinner size="small" showText={false} /> : 'Send SMS Code'}
              </Button>
            </motion.div>
          ) : (
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="space-y-6">
              <ValidatedInput
                name="otp"
                label="Verification Code"
                placeholder="Enter 6-digit code"
                value={otpForm.values.otp}
                error={otpForm.errors.otp}
                touched={otpForm.touched.otp}
                onChange={otpForm.handleChange}
                onBlur={otpForm.handleBlur}
                maxLength={6}
                className="text-center tracking-widest"
                required
              />
              <Button
                onClick={handleVerifyOTP}
                disabled={isLoading || !otpForm.isValid}
                className="w-full py-6 text-lg bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 disabled:opacity-50"
              >
                {isLoading ? (
                  <LoadingSpinner size="small" showText={false} />
                ) : (
                  <>
                    Verify & Continue
                    <ArrowRight className="ml-2" />
                  </>
                )}
              </Button>
              <button
                onClick={() => setShowOTP(false)}
                className="w-full text-sm text-gray-500 hover:text-gray-700"
                disabled={isLoading}
              >
                Back to edit phone number
              </button>
            </motion.div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
